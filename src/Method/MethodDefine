1、方法的定义：
	修饰符   返回值类型  方法名(参数列表){
		//方法体
	}
	public static void main(String[] args){
		
		int x=2,y=5;
		
		int z=max(x,y);
		
		System.out.println("x,y中最大值为："+z);
	}
	
	public static int max(int num1,int num2){
		int result;
		if(num1>num2)
			result=num1;
		else
			result=num2;
		return result;
	}
	修饰符：public static
	返回值类型：void,int
	返回值：result
	方法名：main,max
	参数列表：String[] args,int num1,int num2
	形式参数：args,num1,num2
	方法签名：main(String[] args),max(int num1,int num2)
	
2、名称解释:
	方法头(method header):方法的修饰符(modifier)、
						返回值类型(returnValueType)、
						方法名(method name)、
						参数列表(parameter)
	
	方法可以返回一个值。
	返回值类型是方法返回值的数据类型。
	有些方法只是完成某些要求的操作，而不返回值。这种情况下,returnValueType为关键字void
	如果方法有返回值，则称为带返回值的方法(value-returning method),
	否则就称为void方法(void method)
	
	形式参数:
		定义在方法头中的变量。
	实际参数:
		当调用方法时，就给参数传递的值。
	参数列表:
		指明方法中的参数的类型、顺序、个数。
		参数是可选的，也就是说，方法可以不包含参数
	方法签名:
		方法名和参数列表一起构成方法签名。
	方法体:
		方法体中包含一个定义方法做什么的语句集合。
	
	**在方法头中，需要对每一个参数进行独立的数据类型声明。**
	eg:	max(int num1,int num2)
	
	方法定义：
		方法定义是指被定义的条目是什么。
	方法声明：
		方法声明是指为被声明的条目分配内存来存存储数据。

3、方法调用
	根据方法是否有返回值，调用方法有两种途径：
		1：有返回值，对方法的调用通常就当作一个值处理。
			int max=max(2,5);//调用方法max(2,5)并将结果赋值给变量max
			System.out.println(max(2,5));//打印调用方法max(2,5)的返回值
		2：void，对方法的调用必须是一条语句。
			System.out.printf("Welcome to Java");
		
		**对带返回值的方法而言，return语句是必需的**
		**void方法不需要ruturn语句，但他能用于终止方法并返回到方法的调用者  return; **
		
4、调用堆栈
	每当调用一个方法时，系统都会将参数、局部变量存储在一个称为 堆栈 的内存区域中，
     后进先出的方式存储数据。当一个方法调用另一个方法时，调用者的堆栈空间保持不动，
  新开辟的空间处理新方法的调用。一个方法结束返回到调用者时，其相应的空间也被释放。
 
5、参数值的传递
	调用方法时需要提供实参，他们必须与方法签名中所对应的形参次序相同，这称作参数顺序匹配。
		int max=max(2,"value");
		public void max(int key,String value){}
		
	**实参必须与方法签名中定义的参数在次序和数量上匹配，在类型上兼容**
	**类型兼容是指不需要经过显式的类型转换，实参的值可以直接传递给形参**
	
	当调用带参数的方法时，实参的值传递给形参，这个过程称为通过值传递(pass-by-value).
	如果实参是变量而不是直接量，则将该变量的值传递给形参。无论形参在方法中是否被改变，该变量的值不受影响。
	
6、模块化代码
	使用方法可以减少代码冗余，提高代码的复用性。
	
7、重载方法
	在一个类中有两个方法，他们具有相同的方法名，但是有不同的参数列表。
	(1)参数个数不同(2)参数类型顺序不同(3)参数类型不同
	
	**被重载的方法必须具有不同的参数列表，但不能基于不同修饰符或者返回值类型来重载方法**

8、变量的作用域
	变量的作用域是指变量可以在程序中引用的范围。
	
	局部变量:
		在方法中定义的变量称为局部变量(local variable)。
		局部变量的作用域从声明变量的地方开始，直到包含该变量的块结束为止。
		局部变量必须在使用前进行声明和赋值。
		参数就是一个局部变量。一个方法的参数的作用域涵盖整个方法。
		
		可以在一个方法中的不同块里声明同名的局部变量，但是，
		不能在嵌套块中或者同一个块中两次声明同一个局部变量。
9、Math数学类

	(1)三角函数方法
		Math.sin(double radians)
		Math.cos(double radians)
		Math.tan(double radians)
		Math.toRadians(double degree)
		Math.toDegree(double radians)
		Math.asin(double a)
		Math.acos(double a)
		Math.atan(double a)
		
	(2)指数函数方法
		Math.exp(double x)
		Math.log(double x)
		Math.log10(double x)
		Math.pow(double a,double b)
		Math.sqrt(double x)
		
	(3)取证函数方法
		Math.ceil(double x)
		Math.floor(double x)
		Math.rint(double x)
		Math.round(double x)
		
	(4)最大值，最小值，绝对值
		Math.max(2,3) return 3
		Math.max(2.5,3) return 3.0
		Math.min(2.5,3.6) ruturn 2.5
		Math.abs(-2) return 2
		Math.abs(-2.1) ruturn 2.1
		
	(5)随机数
	    0.0<=Math.random()<1.0
		a + Math.random() * b
		return  a <= returnValue < a+b
		
	(6)随机字符
		随机生成任意两个字符ch1和ch2之间的随机字符
		(char) (ch1 + Math.random() * (ch2 - ch1 + 1))

10、方法的抽象
	方法抽象:
		指通过将方法的使用和他的实现分离来实现。用户无需知道如何实现的情况下就可以直接使用。
	方法封装:
		方法的实现细节封装在方法内，对使用该方法的用户来说是隐藏的。
		
11、自顶向下和自底向上的实现(逐步实现)
	“自顶向下”方式是自上而下，每次实现结构图中的一个方法。等待实现的方法可以用待完善方法代替。
	“待完善方法(stub)”是方法的一个简单但不完整的版本。使用待完善的方法可以快速的构建程序的框架。
	
	“自底向上”是从下向上每次实现结构图的一个方法，对每个实现的方法都写一个测试程序进行测试。
	
	
****************************************************************************
****************************************************************************
1、方法头指定方法的修饰符、返回值类型、方法名和参数。
2、方法可以返回一个值。返回值类型returnValueType是方法要返回的值的数据类型。
	如果方法不返回值，则返回值类型是关键字void
3、参数列表是指方法中参数的类型、次序和数量。
	方法名和参数列表一起构成方法签名。
	参数是可选的，也就是说，一个方法可以不包含参数。
4、return语句也可以用在void方法中，用来终止并返回到方法的调用者。
5、传递给方法的实际参数应该与方法签名中的形式参数具有相同的数目、类型和顺序。
6、当程序调用一个方法时，程序控制就转移到被调用的方法。
	当执行到该方法的return语句或者到达方法结束的右括号时，被调用的方法将程序控制会给调用者。
7、在Java中，带返回值的方法也可以当做语句调用，在这种情况下，调用函数只要忽略返回值就可以了。
8、每次调用一个方法时，系统都会将参数和局部变量存储在一个称为堆栈(stack)的区域内。
	当一个方法调用另一个方法时，调用者的堆栈空间保持不动，开辟新的空间处理新方法的调用。
	一个方法完成它的工作之后返回到它的调用者时，就释放其相应的空间。
9、方法可以重载。
	这就意味着两个方法可以具有相同的方法名，只要它们的方法参数列表不同即可。
10、在方法中声明的变量被称为局部变量。
	局部变量的作用域是从声明它的地方开始，到包含这个变量的块结束为止。
	局部变量使用前必须进行声明和初始化。
11、方法抽象是把方法的应用和实现分离。
	用户可以在不知道方法时如何实现的情况下使用方法。
		方法的实现细节封装在方法内，对调用方法的用户隐藏。这就称封装。
12、方法抽象将程序模块化为整齐、层次分明的形式。
	将程序写成简洁的方法构成的集合，更容易编写、调试、维护和修改，也相对提高方法的可复用性。
13、自顶向下、自底向上编程方法
